
"use client";
import RequireAuth from '@/components/RequireAuth'; import {supabase} from '@/lib/supabaseClient'; import {useEffect,useMemo,useState} from 'react'; import {fmt} from '@/lib/format';
type Category={id:string;name:string;kind:'income'|'expense'}; type Budget={id:string;category_id:string;month:string;limit_amount:number;currency:string;}; type Tx={category_id:string|null;amount:number;kind:string;currency:string;tx_date:string;};
const color=(id:string)=>{ let h=0; for(let i=0;i<id.length;i++) h=(h*31+id.charCodeAt(i))>>>0; const colors=['#22d3ee','#a78bfa','#fb7185','#34d399','#f59e0b','#f472b6','#84cc16','#e879f9','#f97316']; return colors[h%colors.length]; };
export default function BudgetsPage(){ const[cats,setCats]=useState<Category[]>([]); const[budgets,setBudgets]=useState<Budget[]>([]); const[progress,setProgress]=useState<Record<string,number>>({}); const[month,setMonth]=useState<string>(new Date().toISOString().slice(0,7));
  const fetchAll=async()=>{ const c=await supabase.from('categories').select('*').eq('kind','expense'); const b=await supabase.from('budgets').select('*').gte('month',month+'-01').lte('month',month+'-31'); const start=month+'-01'; const end=new Date(new Date(start).getFullYear(),new Date(start).getMonth()+1,0).toISOString().slice(0,10); const t=await supabase.from('transactions').select('category_id,amount,kind,tx_date').gte('tx_date',start).lte('tx_date',end); if(!c.error) setCats(c.data||[]); if(!b.error) setBudgets(b.data||[]); if(!t.error){ const m:Record<string,number>={}; (t.data||[]).forEach((x:Tx)=>{ if(x.kind==='expense'&&x.category_id) m[x.category_id]=(m[x.category_id]||0)+Number(x.amount); }); setProgress(m);} };
  useEffect(()=>{ fetchAll(); },[month]);
  const addBudget=async(form:FormData)=>{ const {error}=await supabase.from('budgets').insert({category_id:String(form.get('category_id')),limit_amount:Number(form.get('limit_amount')),currency:String(form.get('currency')),month:month+'-01'}); if(error) alert(error.message); else fetchAll(); };
  return (<RequireAuth><div className='grid gap-6'><div className='flex justify-between items-center'><h1 className='text-2xl font-semibold'>Budgets</h1><input className='input' type='month' value={month} onChange={e=>setMonth(e.target.value)}/></div>
    <div className='card'><h2 className='font-semibold mb-2'>Add Budget</h2><form action={addBudget} className='grid md:grid-cols-4 gap-2'><select name='category_id' className='input'>{cats.map(c=><option key={c.id} value={c.id}>{c.name}</option>)}</select><input name='limit_amount' className='input' type='number' step='0.01' placeholder='Limit amount' required/><select name='currency' className='input'><option>SSP</option><option>USD</option><option>KES</option></select><button className='btn'>Save</button></form></div>
    <div className='grid md:grid-cols-2 gap-3'>{budgets.map(b=>{ const spent=progress[b.category_id]||0; const pct=Math.min(100,Math.round(100*spent/Number(b.limit_amount||1))); const col=color(b.category_id); return (<div key={b.id} className='card'><div className='flex justify-between'><div className='font-semibold'><span className='legend-dot' style={{backgroundColor:col}}></span>{cats.find(c=>c.id===b.category_id)?.name}</div><div className='text-white/70'>{fmt(Number(b.limit_amount||0),b.currency)}</div></div><div className='h-2 bg-white/10 rounded mt-3 overflow-hidden'><div className='h-full' style={{width:pct+'%',backgroundColor:col}}/></div><div className='text-white/70 mt-1'>{fmt(spent,b.currency)} spent â€¢ {pct}%</div></div>); })}</div>
  </div></RequireAuth>);}
