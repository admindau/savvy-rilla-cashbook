"use client";
import RequireAuth from '@/components/RequireAuth'; import { supabase } from '@/lib/supabaseClient'; import { useEffect, useState, FormEvent } from 'react'; import { currencies } from '@/lib/format';
type Rule={id:string; category_id:string|null; account_id:string|null; kind:'income'|'expense'; amount:number; currency:string; interval:'weekly'|'monthly'|'quarterly'|'yearly'; next_run:string; note:string|null};
type Sel={id:string; name:string};
export default function Recurring(){ const [rules,setRules]=useState<Rule[]>([]); const [cats,setCats]=useState<Sel[]>([]); const [accs,setAccs]=useState<Sel[]>([]); const [msg,setMsg]=useState<string|null>(null);
  const fetchAll=async()=>{ const r=await supabase.from('recurring_rules').select('*').order('next_run'); const c=await supabase.from('categories').select('id,name').order('name'); const a=await supabase.from('accounts').select('id,name').order('name'); if(!r.error) setRules(r.data||[]); if(!c.error) setCats(c.data||[]); if(!a.error) setAccs(a.data||[]); };
  useEffect(()=>{ fetchAll(); },[]);
  const addRule=async(e:FormEvent)=>{ e.preventDefault(); setMsg(null); const fd=new FormData(e.target as HTMLFormElement); const payload:any={ category_id:String(fd.get('category_id'))||null, account_id:String(fd.get('account_id'))||null, kind:String(fd.get('kind')), amount:Number(fd.get('amount')), currency:String(fd.get('currency')), interval:String(fd.get('interval')), next_run:String(fd.get('next_run')), note:String(fd.get('note')||'')||null }; const {error}=await supabase.from('recurring_rules').insert(payload); if(error) setMsg(error.message); else { (e.target as HTMLFormElement).reset(); fetchAll(); } };
  const applyRule=async(id:string)=>{ setMsg(null); const r=rules.find(x=>x.id===id); if(!r) return; const { error } = await supabase.from('transactions').insert({ account_id: r.account_id, category_id: r.category_id, amount: r.amount, currency: r.currency, kind: r.kind, tx_date: new Date().toISOString().slice(0,10), note: r.note }); if(error) setMsg(error.message); else setMsg('Applied!'); };
  return (<RequireAuth><div className='grid gap-6'><div className='card'><h2 className='font-semibold mb-2'>Add Recurring Rule</h2><form onSubmit={addRule} className='grid md:grid-cols-3 gap-2'><select name='account_id' className='input'><option value=''>Any account</option>{accs.map(a=><option key={a.id} value={a.id}>{a.name}</option>)}</select><select name='category_id' className='input'><option value=''>Uncategorized</option>{cats.map(c=><option key={c.id} value={c.id}>{c.name}</option>)}</select><div className='grid grid-cols-2 gap-2'><select name='kind' className='input'><option>expense</option><option>income</option></select><select name='currency' className='input'>{(currencies as any).map((c:string)=><option key={c}>{c}</option>)}</select></div><div className='grid grid-cols-2 gap-2'><input name='amount' className='input' type='number' step='0.01' placeholder='Amount' required/><select name='interval' className='input'><option>monthly</option><option>weekly</option><option>quarterly</option><option>yearly</option></select></div><input name='next_run' className='input' type='date' defaultValue={new Date().toISOString().slice(0,10)}/><input name='note' className='input' placeholder='Note (optional)'/><button className='btn'>Save</button></form></div><div className='card'><h2 className='font-semibold mb-2'>Existing Rules</h2>{rules.length===0? <div className='text-white/70'>No rules yet.</div> : <div className='table'>{rules.map(r=>(<div key={r.id} className='grid md:grid-cols-8 gap-2 py-2 border-b border-white/10'><div>{r.next_run}</div><div>{r.kind}</div><div>{r.amount.toFixed(2)}</div><div>{r.currency}</div><div className='truncate'>{cats.find(c=>c.id===r.category_id)?.name||'—'}</div><div className='truncate'>{accs.find(a=>a.id===r.account_id)?.name||'—'}</div><div className='truncate'>{r.note||''}</div><div><button className='btn' onClick={()=>applyRule(r.id)}>Apply</button></div></div>))}</div>}</div>{msg && <div className='card'>{msg}</div>}</div></RequireAuth>); }
